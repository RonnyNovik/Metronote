{"version":3,"sources":["components/Metronome/Circle/Circle.module.scss","components/BpmControls/BpmControls.module.scss","components/Metronome/Metronome.module.scss","components/Metronome/Circle/Circle.js","components/Button/Button.js","components/BpmControls/BpmContols.js","components/Metronome/Metronome.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Circle","props","className","CircleStyle","Button","onClick","styles","class","icon","size","BpmContols","ControlsContainer","decreaseBPM","faMinusCircle","increaseBPM","faPlusCircle","togglePlay","isPlaying","faPauseCircle","faPlayCircle","Metronome","state","playing","count","minbpm","maxbpm","bpm","beatsPerMeasure","playClick","circleElement","CircleContainer","current","children","classList","add","Pulse","setTimeout","remove","audioRef2","play","audioRef","setState","playHandler","Object","values","forEach","element","PlayFade","timer","setInterval","pauseHandler","clearInterval","onChangeBPM","e","newBpm","target","value","parseInt","isNaN","alert","React","createRef","Circles","map","i","key","number","MetronomeContainer","ref","this","BpmDisplayContainer","onChange","type","src","Component","App","style","margin","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d262b7ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CircleStyle\":\"Circle_CircleStyle__iGBu8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlsContainer\":\"BpmControls_ControlsContainer__3hMMF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CircleContainer\":\"Metronome_CircleContainer__3_t1n\",\"BpmDisplayContainer\":\"Metronome_BpmDisplayContainer__1Q9Zy\",\"PlayFade\":\"Metronome_PlayFade__wGa0B\",\"Pulse\":\"Metronome_Pulse__1XOct\"};","import React from 'react';\r\nimport { CircleStyle } from './Circle.module.scss';\r\n\r\nconst Circle = ( props ) => {\r\n    \r\n    return (\r\n        <div className = { CircleStyle }>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Circle;","import React from 'react';\r\nimport styles from './Button.module.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Button = ( props ) => {\r\n\r\n    //\r\n    return (\r\n        <>\r\n           <button onClick={ props.onClick } className={ styles[props.class] }><FontAwesomeIcon icon={ props.icon } size = { props.size }/></button> \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../Button/Button';\r\nimport { ControlsContainer } from './BpmControls.module.scss';\r\nimport { faMinusCircle, faPlusCircle, faPlayCircle, faPauseCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst BpmContols = (props) => {\r\n    return (\r\n        <>\r\n            <div className={ControlsContainer}>\r\n                <Button onClick={props.decreaseBPM} size='4x' icon={faMinusCircle} class='minus-button' />\r\n                <Button onClick={props.increaseBPM} size='4x' icon={faPlusCircle} class='plus-button' />\r\n                <Button onClick={props.togglePlay} size='4x' icon={props.isPlaying ? faPauseCircle : faPlayCircle} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BpmContols;","import React, { Component } from \"react\";\r\nimport Circle from \"./Circle/Circle\";\r\nimport {\r\n  MetronomeContainer,\r\n  CircleContainer,\r\n  BpmDisplayContainer,\r\n  Pulse,\r\n  PlayFade\r\n} from \"./Metronome.module.scss\";\r\nimport BpmControls from \"../BpmControls/BpmContols\";\r\n\r\nclass Metronome extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.audioRef = React.createRef();\r\n    this.audioRef2 = React.createRef();\r\n    this.CircleContainer = React.createRef();\r\n  }\r\n\r\n  state = {\r\n    playing: false,\r\n    count: 0,\r\n    minbpm: 0,\r\n    maxbpm: 260,\r\n    bpm: 120,\r\n    beatsPerMeasure: 4\r\n  }\r\n\r\n\r\n\r\n  playClick = () => {\r\n    // Choose the desired circle according to the beat\r\n    const circleElement = this.CircleContainer.current.children[this.state.count];\r\n\r\n    // Add the Pulse class to invoke a pulse animation\r\n    circleElement.classList.add(Pulse);\r\n\r\n    // Remove the animation right after to trigger the pulse animation in reverse\r\n    setTimeout(() => {\r\n      circleElement.classList.remove(Pulse);\r\n    }, 200);\r\n\r\n    // If it is the first beat, play its designated sound. else, play the regular beat\r\n    if (this.state.count === 0) {\r\n      this.audioRef2.current.play();\r\n    } else {\r\n      this.audioRef.current.play();\r\n    }\r\n\r\n    // Keep track of which beat we're on\r\n    this.setState(state => ({\r\n      count: (state.count + 1) % state.beatsPerMeasure\r\n    }));\r\n\r\n  }\r\n\r\n  playHandler = () => {\r\n    // Create an array of all the Circle elements\r\n    const CircleContainer = Object.values(this.CircleContainer.current.children);\r\n\r\n    // Animate a fade-out on each circle on play\r\n    CircleContainer.forEach(element => {\r\n      element.classList.add(PlayFade)\r\n    });\r\n\r\n    // Start a timer with the current BPM\r\n    this.timer = setInterval(this.playClick, (60 / this.state.bpm) * 1000);\r\n\r\n    this.setState({\r\n      count: 0,\r\n      playing: true\r\n      // Play a click \"immediately\" (after setState finishes)\r\n    }, this.playClick);\r\n\r\n  }\r\n\r\n  pauseHandler = () => {\r\n\r\n    // Create an array of all the Circle elements\r\n    const CircleContainer = Object.values(this.CircleContainer.current.children);\r\n\r\n    // Animate a fade-out on each circle on play\r\n    CircleContainer.forEach(element => {\r\n      element.classList.remove(PlayFade)\r\n    });\r\n\r\n    // Stop the timer\r\n    clearInterval(this.timer);\r\n    this.setState({\r\n      playing: false\r\n    });\r\n  }\r\n\r\n\r\n  togglePlay = () => {\r\n    // Invoke play or pause according to state\r\n    if (this.state.playing) {\r\n      this.pauseHandler();\r\n    } else {\r\n      this.playHandler();\r\n    }\r\n  };\r\n\r\n  decreaseBPM = () => {\r\n    const { minbpm, bpm } = this.state;\r\n    //Pause the beat to reset the beat timer\r\n    this.pauseHandler();\r\n    // If the new bpm is above 0, decrement by 1. else, set to 0\r\n    if (bpm > minbpm) {\r\n      this.setState({ bpm: bpm - 1 }, this.playHandler);\r\n    } else {\r\n      this.setState({ bpm: minbpm }, this.playHandler);\r\n    }\r\n  }\r\n\r\n  increaseBPM = () => {\r\n    const { maxbpm, bpm } = this.state;\r\n    //Pause the beat to reset the beat timer\r\n    this.pauseHandler();\r\n    // If the new bpm is below 260, increment by 1. else, set to 260\r\n    if (bpm < maxbpm) {\r\n      this.setState({ bpm: bpm + 1 }, this.playHandler);\r\n    } else {\r\n      this.setState({ bpm: maxbpm }, this.playHandler);\r\n    }\r\n  }\r\n  onChangeBPM = (e) => {\r\n\r\n    // On input change, get the value of the input and parse it into integer and assign it to newBpm\r\n    const newBpm = e.target.value !== '' ? parseInt(e.target.value) : '';\r\n\r\n    //Pause the beat to reset the beat timer\r\n    this.pauseHandler();\r\n\r\n    // If newBpm is a number or a blank input, set the state according to the new value\r\n    if (!isNaN(newBpm) || newBpm === '') {\r\n\r\n      if (newBpm > this.state.maxbpm) {\r\n        // If newBpm is above 260, change it to 260 and notify the user. else, set the state of bpm as usual.\r\n        alert('Maximum BPM allowed is 260')\r\n        this.setState({ bpm: this.state.maxbpm }, this.playHandler);\r\n\r\n      } else {\r\n        this.setState({ bpm: newBpm }, this.playHandler);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    //Create 4 circles\r\n    const Circles = [1, 2, 3, 4].map((i) =>\r\n      <Circle key={i} number={i} />\r\n    );\r\n    return (\r\n      <div className={MetronomeContainer}>\r\n\r\n        <div ref={this.CircleContainer} className={CircleContainer}>\r\n          {Circles}\r\n        </div>\r\n\r\n        <div className={BpmDisplayContainer}>\r\n          <input\r\n            onChange={this.onChangeBPM}\r\n            type=\"text\"\r\n            value={this.state.bpm}\r\n          />\r\n          <span>bpm</span>\r\n        </div>\r\n\r\n        <BpmControls\r\n          isPlaying={this.state.playing}\r\n          increaseBPM={this.increaseBPM}\r\n          decreaseBPM={this.decreaseBPM}\r\n          togglePlay={this.togglePlay}\r\n        />\r\n\r\n        <audio ref={this.audioRef} src=\"sound.wav\" />\r\n        <audio ref={this.audioRef2} src=\"sound2.wav\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Metronome;\r\n","import React from 'react';\nimport Metronome from './components/Metronome/Metronome';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h1 style={{margin: '0 0 0 2.5vw'}}>metronote<span style={{color: '#d1fb42'}}>.</span> </h1>\n     <Metronome />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}