{"version":3,"sources":["components/Metronome/Circle/Circle.module.scss","components/BpmControls/BpmControls.module.scss","components/Metronome/Metronome.module.scss","components/Metronome/Circle/Circle.js","components/Button/Button.js","components/BpmControls/BpmContols.js","components/Metronome/Metronome.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Circle","props","className","CircleStyle","Button","onClick","styles","class","icon","size","BpmContols","ControlsContainer","decreaseBPM","faMinusCircle","increaseBPM","faPlusCircle","togglePlay","isPlaying","faPauseCircle","faPlayCircle","Metronome","state","playing","count","minbpm","maxbpm","bpm","beatsPerMeasure","playClick","circleElement","CircleContainer","current","children","classList","add","Pulse","setTimeout","remove","audioRef2","play","audioRef","setState","playHandler","Object","values","forEach","element","PlayFade","timer","setInterval","pauseHandler","clearInterval","onChangeBPM","e","newBpm","target","value","parseInt","isNaN","alert","React","createRef","Circles","map","i","key","number","MetronomeContainer","ref","this","BpmDisplayContainer","InputContainer","onChange","type","src","Component","App","style","margin","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d6644be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CircleStyle\":\"Circle_CircleStyle__iGBu8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlsContainer\":\"BpmControls_ControlsContainer__3hMMF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CircleContainer\":\"Metronome_CircleContainer__3_t1n\",\"BpmDisplayContainer\":\"Metronome_BpmDisplayContainer__1Q9Zy\",\"PlayFade\":\"Metronome_PlayFade__wGa0B\",\"Pulse\":\"Metronome_Pulse__1XOct\"};","import React from 'react';\r\nimport { CircleStyle } from './Circle.module.scss';\r\n\r\nconst Circle = ( props ) => {\r\n    \r\n    return (\r\n        <div className = { CircleStyle }>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Circle;","import React from 'react';\r\nimport styles from './Button.module.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Button = ( props ) => {\r\n\r\n    //\r\n    return (\r\n        <>\r\n           <button onClick={ props.onClick } className={ styles[props.class] }><FontAwesomeIcon icon={ props.icon } size = { props.size }/></button> \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../Button/Button';\r\nimport { ControlsContainer } from './BpmControls.module.scss';\r\nimport { faMinusCircle, faPlusCircle, faPlayCircle, faPauseCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst BpmContols = (props) => {\r\n    return (\r\n        <>\r\n            <div className={ControlsContainer}>\r\n                <Button onClick={props.decreaseBPM} size='4x' icon={faMinusCircle} class='minus-button' />\r\n                <Button onClick={props.increaseBPM} size='4x' icon={faPlusCircle} class='plus-button' />\r\n                <Button onClick={props.togglePlay} size='4x' icon={props.isPlaying ? faPauseCircle : faPlayCircle} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BpmContols;","import React, { Component } from \"react\";\r\nimport Circle from \"./Circle/Circle\";\r\nimport {\r\n  MetronomeContainer,\r\n  CircleContainer,\r\n  BpmDisplayContainer,\r\n  InputContainer,\r\n  Pulse,\r\n  PlayFade\r\n} from \"./Metronome.module.scss\";\r\nimport BpmControls from \"../BpmControls/BpmContols\";\r\n\r\nclass Metronome extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.audioRef = React.createRef();\r\n    this.audioRef2 = React.createRef();\r\n    this.CircleContainer = React.createRef();\r\n  }\r\n\r\n  state = {\r\n    playing: false,\r\n    count: 0,\r\n    minbpm: 0,\r\n    maxbpm: 260,\r\n    bpm: 120,\r\n    beatsPerMeasure: 4\r\n  }\r\n\r\n  playClick = () => {\r\n    // Choose the desired circle according to the beat\r\n    const circleElement = this.CircleContainer.current.children[this.state.count];\r\n    // Add the Pulse class to invoke a pulse animation\r\n    circleElement.classList.add(Pulse);\r\n    // Remove the animation right after to trigger the pulse animation in reverse\r\n    setTimeout(() => {\r\n      circleElement.classList.remove(Pulse);\r\n    }, 200);\r\n    // If it is the first beat, play its designated sound. else, play the regular beat\r\n    if (this.state.count === 0) {\r\n      this.audioRef2.current.play();\r\n    } else {\r\n      this.audioRef.current.play();\r\n    }\r\n\r\n    // Keep track of which beat we're on\r\n    this.setState(state => ({\r\n      count: (state.count + 1) % state.beatsPerMeasure\r\n    }));\r\n\r\n  }\r\n\r\n  playHandler = () => {\r\n    const { bpm } = this.state\r\n    if(bpm === 0){\r\n      return;\r\n    }\r\n    // Create an array of all the Circle elements\r\n    const CircleContainer = Object.values(this.CircleContainer.current.children);\r\n    // Animate a fade-out on each circle on play\r\n    CircleContainer.forEach(element => {\r\n      element.classList.add(PlayFade)\r\n    });\r\n    // Start a timer with the current BPM\r\n  \r\n    this.timer = setInterval(this.playClick, (60 / this.state.bpm) * 1000);\r\n    this.setState({\r\n      count: 0,\r\n      playing: true\r\n      // Play a click \"immediately\" (after setState finishes)\r\n    }, this.playClick);\r\n\r\n  }\r\n\r\n  pauseHandler = () => {\r\n    // Create an array of all the Circle elements\r\n    const CircleContainer = Object.values(this.CircleContainer.current.children);\r\n    // Animate a fade-out on each circle on play\r\n    CircleContainer.forEach(element => {\r\n      element.classList.remove(PlayFade)\r\n    });\r\n    // Stop the timer\r\n    clearInterval(this.timer);\r\n    this.setState({\r\n      playing: false\r\n    });\r\n  }\r\n\r\n  togglePlay = () => {\r\n    const {playing} = this.state\r\n    // Invoke play or pause according to state\r\n    if (playing) {\r\n      this.pauseHandler();\r\n    } else {\r\n      this.playHandler();\r\n    }\r\n  };\r\n\r\n  decreaseBPM = () => {\r\n    const { minbpm, bpm } = this.state;\r\n    //Pause the beat to reset the beat timer\r\n    this.pauseHandler();\r\n    // If the new bpm is above 0, decrement by 1. else, set to 0\r\n    if (bpm > minbpm) {\r\n      this.setState({ bpm: bpm - 1 }, this.playHandler);\r\n    } else {\r\n      this.setState({ bpm: minbpm }, this.playHandler);\r\n    }\r\n  }\r\n\r\n  increaseBPM = () => {\r\n    const { maxbpm, bpm } = this.state;\r\n    //Pause the beat to reset the beat timer\r\n    this.pauseHandler();\r\n    // If the new bpm is below 260, increment by 1. else, set to 260\r\n    if (bpm < maxbpm) {\r\n      this.setState({ bpm: bpm + 1 }, this.playHandler);\r\n    } else {\r\n      this.setState({ bpm: maxbpm }, this.playHandler);\r\n    }\r\n  }\r\n\r\n  onChangeBPM = (e) => {\r\n    const {maxbpm, playing} = this.state\r\n    // On input change, get the value of the input and parse it into integer and assign it to newBpm\r\n    const newBpm = e.target.value !== '' ? parseInt(e.target.value) : '';\r\n    //Pause the beat to reset the beat timer\r\n    this.pauseHandler();\r\n    // If newBpm is a number or a blank input, set the state according to the new value\r\n    if (!isNaN(newBpm) || newBpm === '') {\r\n      if (newBpm > this.state.maxbpm) {\r\n        // If newBpm is above 260, change it to 260 and notify the user. else, set the state of bpm as usual.\r\n        alert('Maximum BPM allowed is 260')\r\n        //set the state to the max bpm allowed and invoke this.playHandler if this.state.playing = true. Otherwise, return null\r\n        this.setState({ bpm: maxbpm }, playing ? this.playHandler : null);\r\n        //if the bpm input is empty, set the bpm to 0\r\n      } else if(newBpm === ''){\r\n        this.setState({ bpm:0 });\r\n        //If the bpm is between 0-260 and is a number, \r\n        //Set the state of bpm to newBpm value,\r\n        //Invoke this.playHandler if this.state.playing = true. Otherwise, return null\r\n      } else {\r\n        this.setState({ bpm: newBpm }, playing ? this.playHandler : null);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    //Create 4 circles\r\n    const Circles = [1, 2, 3, 4].map((i) =>\r\n      <Circle key={i} number={i} />\r\n    );\r\n    return (\r\n      <div className={MetronomeContainer}>\r\n        <div ref={this.CircleContainer} className={CircleContainer}>\r\n          {Circles}\r\n        </div>\r\n\r\n        <div className={BpmDisplayContainer}>\r\n          <div className={InputContainer}>\r\n            <input\r\n              onChange={this.onChangeBPM}\r\n              type=\"text\"\r\n              value={this.state.bpm}\r\n            />\r\n          </div>\r\n          <span>bpm</span>\r\n          \r\n        </div>\r\n \r\n        <BpmControls\r\n          isPlaying={this.state.playing}\r\n          increaseBPM={this.increaseBPM}\r\n          decreaseBPM={this.decreaseBPM}\r\n          togglePlay={this.togglePlay}\r\n        />\r\n\r\n        <audio ref={this.audioRef} src=\"sound.wav\" />\r\n        <audio ref={this.audioRef2} src=\"sound2.wav\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Metronome;\r\n","import React from 'react';\r\nimport Metronome from './components/Metronome/Metronome';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <h1 style={{margin: '0 0 0 2.5vw'}}>metronote<span style={{color: '#d1fb42'}}>.</span> </h1>\r\n     <Metronome />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}